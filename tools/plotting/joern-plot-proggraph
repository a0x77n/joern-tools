#!/usr/bin/env python2

from joerntools.shelltool.JoernTool import JoernTool
import pygraphviz as pgv

DESCRIPTION = """Retrieve a graph representation of a function with the given
id. The default output format is graphviz's 'dot'.
"""

CFG_NODE_COLOR = 'lightblue'
CFG_ENTRY_NODE_COLOR = 'lemonchiffon'
CFG_EXIT_NODE_COLOR = 'lemonchiffon'
CFG_ERROR_NODE_COLOR = 'lightcoral'
CFG_EDGE_COLOR = 'lightblue'
DDG_EDGE_COLOR = 'lightcoral'
CDG_EDGE_COLOR = 'khaki'
SYMBOL_NODE_COLOR = 'lightgray'
USE_EDGE_COLOR = 'lightgray'
DEF_EDGE_COLOR = 'lightgray'

class ProgramGraph(JoernTool):

    def __init__(self):

        JoernTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-a', '--attributes',
                                    nargs = '+', type = str,
                                    help = """Attributes shown in each node.""",
                                    default = None)

        self.argParser.add_argument('-cfg', '--show-control-flow',
                                    action = 'store_true',
                                    help = """Show control flow.""",
                                    default = False)

        self.argParser.add_argument('-dfg', '--show-data-flow',
                                    action = 'store_true',
                                    help = """Show data flow.""",
                                    default = False)

        self.argParser.add_argument('-ddg', '--show-data-dependences',
                                    action = 'store_true',
                                    help = """Show data dependences.""",
                                    default = False)

        self.argParser.add_argument('-cdg', '--show-control-dependences',
                                    action = 'store_true',
                                    help = """Show control dependences.""",
                                    default = False)

        self.argParser.add_argument('-dom', '--show-dominance-edges',
                                    action = 'store_true',
                                    help = """Show dominance edges.""",
                                    default = False)

        self.argParser.add_argument('-all', '--show-all',
                                    action = 'store_true',
                                    help = """Show all edge types""",
                                    default = False)


    # @Override
    def processLine(self, line):

        self.function_id = int(line)
        
        G = self._createDotGraph()
        self._outputGraph(G, line)

    def _getCFGNodes(self):

        query = """queryNodeIndex('functionId:%s AND isCFGNode:True')""" % (self.function_id)
        return self._runGremlinQuery(query)

    def _getSymbolNodes(self):

        if not self.args.show_data_flow and not self.args.show_all:
            return []

        query = """queryNodeIndex('functionId:%s AND type:Symbol')""" % (self.function_id)
        return self._runGremlinQuery(query)

    def _getEdges(self, edge_type):

        query = """queryNodeIndex('functionId:%s AND isCFGNode:True').outE('%s')""" % (self.function_id, edge_type)
        return self._runGremlinQuery(query)
    
    def _createDotGraph(self):

        G = pgv.AGraph(directed = True, strict = False)

        self._addCFGNodes(G)

        if self.args.show_all or self.args.show_control_flow:
            self._addCFGEdges(G)
        if self.args.show_all or self.args.show_data_flow:
            self._addDefUseEdges(G)
        if self.args.show_all or self.args.show_data_dependences:
            self._addDDGEdges(G)
        if self.args.show_all or self.args.show_control_dependences:
            self._addCDGEdges(G)
        if self.args.show_all or self.args.show_dominance_edges:
            self._addDomEdges(G)
            
        return G

    def _addCFGNodes(self, G):

        for node in self._getCFGNodes():
            if node.get_properties()['type'] == 'CFGEntryNode':
                color = CFG_ENTRY_NODE_COLOR
            elif node.get_properties()['type'] == 'CFGExitNode':
                color = CFG_EXIT_NODE_COLOR
            elif node.get_properties()['type'] == 'CFGErrorNode':
                color = CFG_ERROR_NODE_COLOR
            else:
                color = CFG_NODE_COLOR
            G.add_node(node._id,
                    label = self._attributesAsString(node),
                    style = 'filled',
                    fontsize = 10,
                    color = color)

    def _addSymbolNodes(self, G):

        for node in self._getSymbolNodes():
            G.add_node(node._id,
                    label = node.get_properties()['code'],
                    style = 'filled',
                    fontsize = 10,
                    color = SYMBOL_NODE_COLOR)

    def _addCFGEdges(self, G):

        for edge in self._getEdges('FLOWS_TO'):
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = CFG_EDGE_COLOR,
                    label = edge.get_properties()['flowLabel'])

    def _addDefUseEdges(self, G):

        self._addSymbolNodes(G)
        for edge in self._getEdges('DEF'):
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = DEF_EDGE_COLOR,
                    label = 'def')

        for edge in self._getEdges('USE'):
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = USE_EDGE_COLOR,
                    label = 'use')

    def _addDDGEdges(self, G):

        for edge in self._getEdges('REACHES'):
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = DDG_EDGE_COLOR,
                    label = edge.get_properties()['var'])

    def _addCDGEdges(self, G):

        for edge in self._getEdges('CONTROLS'):
            G.add_edge(edge.start_node._id, edge.end_node._id,
                    fontsize = 10,
                    color = CDG_EDGE_COLOR)

    def _addDomEdges(self, G):

        for edge in self._getEdges('POST_DOM'):
            G.add_edge(edge.start_node._id, edge.end_node._id)

    def _attributesAsString(self, n):
        
        properties = n.get_properties()
        properties['id'] = n._id
        valid_attributes = []
        if self.args.attributes:
            for a in self.args.attributes:
                if a in properties:
                    valid_attributes.append(a)

            if not valid_attributes:
                valid_attributes.append('id')

            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in valid_attributes])
        else:
            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in properties.keys()])

    def _outputGraph(self, G, identifier):

        ENDMARKER = '//###'
        self.output('//' + identifier + '\n')
        self.output(str(G) + '\n')
        self.output(ENDMARKER + '\n')
    
if __name__ == '__main__':
    tool = ProgramGraph()
    tool.run()
