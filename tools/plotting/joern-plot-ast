#!/usr/bin/env python2

from joerntools.shelltool.JoernTool import JoernTool
import pygraphviz as pgv

DESCRIPTION = """Retrieve the AST rooted at the node with the given
id. The default output format is graphviz's 'dot'.
"""

AST_NODE_COLOR = 'lightcoral'
AST_EDGE_COLOR = 'lightcoral'

class AST(JoernTool):
    
    def __init__(self):
        JoernTool.__init__(self, DESCRIPTION)

        self.argParser.add_argument('-a', '--attributes',
                                    nargs = '+', type = str,
                                    help = """Attributes shown in each node.""",
                                    default = None)

    # @Override
    def processLine(self, line):
        nodeId = int(line)
        
        nodes = self._getASTNodes(nodeId)
        edges = self._getASTEdges(nodeId)
        
        G = self._createDotGraph(nodes, edges)
        self._outputGraph(G, line)
    
    def _getASTNodes(self, nodeId):
        query = """g.v(%d).functionToAST().astNodes()
        """% (nodeId)
        
        return self._runGremlinQuery(query)
    
    def _getASTEdges(self, nodeId):
        query = """g.v(%d).functionToAST()
        .astNodes().outE('IS_AST_PARENT')
        """% (nodeId)
        
        return self._runGremlinQuery(query)

    def _createDotGraph(self, nodes, edges):
        G = pgv.AGraph()
        
        for node in nodes:
            G.add_node(
                    node._id,
                    label = self._attributesAsString(node),
                    style = 'filled',
                    fontsize = 10,
                    color = AST_NODE_COLOR)

        for edge in edges:
            G.add_edge(
                    edge.start_node._id, edge.end_node._id,
                    color = AST_EDGE_COLOR)
            
        return G

    def _attributesAsString(self, n):
        properties = n.get_properties()
        properties['id'] = n._id
        valid_attributes = []
        if self.args.attributes:
            for a in self.args.attributes:
                if a in properties:
                    valid_attributes.append(a)

            if not valid_attributes:
                valid_attributes.append('id')

            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in valid_attributes])
        else:
            return '\\n'.join(['%s:%s' % (k, str(properties[k]).replace('\n',' ')) 
                    for k in properties.keys()])

    def _outputGraph(self, G, identifier):
        ENDMARKER = '//###'
        self.output('//' + identifier + '\n')
        self.output(str(G) + '\n')
        self.output(ENDMARKER + '\n')
    
if __name__ == '__main__':
    tool = AST()
    tool.run()
